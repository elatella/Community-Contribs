---
# Global settings
# create defectdojo specific secret
createSecret: true

# Enables application network policy
# For more info follow https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  enabled: true
  # if additional labels need to be allowed (e.g. prometheus scraper)
  ingressExtend:
    - podSelector:
        matchLabels:
          app.kubernetes.io/instance: defectdojo-prometheus

# Primary hostname of instance
host: <insert your webhost address here>

securityContext:
  enabled: false
  djangoSecurityContext:
    # django dockerfile sets USER=1001
    runAsUser: 1002040001
  nginxSecurityContext:
    # nginx dockerfile sets USER=1001
    runAsUser: 100204001

monitoring:
  enabled: true
  # Add the nginx prometheus exporter sidecar
  prometheus:
    enabled: true
    image: nginx/nginx-prometheus-exporter:0.11.0
    imagePullPolicy: IfNotPresent

# Components
celery:
  broker: redis

django:
  ingress:
    hosts:
      - <insert your webhost address here>
    activateTLS: false
    secretName: defectdojo-tls
    annotations:
      # Restricts the type of ingress controller that can interact with our chart (nginx, traefik, ...)
      # kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      # Depending on the size and complexity of your scans, you might want to increase the default ingress timeouts if you see repeated 504 Gateway Timeouts
      # nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
      # nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
      route.openshift.io/termination: edge
    labels:
      public: "true"

  # This feature needs more preparation before can be enabled, please visit KUBERNETES.md#media-persistent-volume
  mediaPersistentVolume:
    enabled: false
    fsGroup: 1002040001

postgresql:
  primary:
    podSecurityContext:
      # Default is true for K8s. Enabled needs to false for OpenShift restricted SCC and true for anyuid SCC
      enabled: false
    containerSecurityContext:
      # Default is true for K8s. Enabled needs to false for OpenShift restricted SCC and true for anyuid SCC
      enabled: false
  volumePermissions:
    containerSecurityContext:
      runAsUser: "auto"

rabbitmq:
  enabled: false

# For more advance options check the bitnami chart documentation: https://github.com/bitnami/charts/tree/master/bitnami/redis
redis:
  enabled: true
  scheme: "redis"
  master:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false

  #Establish Route necessary for Openshift:
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: defectdojo
  namespace: defectdojo
spec:
  host: <insert your webhost address here>
  path: /
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: defectdojo-django
  port:
    targetPort: http
  wildcardPolicy: None

# To add extra variables not predefined by helm config it is possible to define in extraConfigs block, e.g. below:
# NOTE  Do not store any kind of sensitive information inside of it
# extraConfigs:
#   DD_SOCIAL_AUTH_AUTH0_OAUTH2_ENABLED: 'true'
#   DD_SOCIAL_AUTH_AUTH0_KEY: 'dev'
#   DD_SOCIAL_AUTH_AUTH0_DOMAIN: 'xxxxx'

# Extra secrets can be created inside of extraSecrets block:
# NOTE  This is just an exmaple, do not store sensitive data in plain text form, better inject it during the deployment/upgrade by --set extraSecrets.secret=someSecret
# extraSecrets:
#   DD_SOCIAL_AUTH_AUTH0_SECRET: 'xxx'
extraConfigs:
  DJANGO_METRICS_ENABLED: "True" ### to enable prometheus

# extraSecrets:
# To add (or override) extra variables which need to be pulled from another configMap, you can
# use extraEnv. For example:
# extraEnv:
# - name: DD_DATABASE_HOST
#   valueFrom:
#     configMapKeyRef:
#       name: my-other-postgres-configmap
#       key: cluster_endpoint
